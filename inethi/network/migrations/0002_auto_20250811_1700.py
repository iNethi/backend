# Generated by Django 5.1 on 2025-08-11 15:00

from django.db import migrations, models
import django.db.models.deletion
from django.conf import settings


def migrate_admin_to_created_by_and_admins(apps, schema_editor):
    """
    Migrate data from the old 'admin' field to the new 'created_by' and 'admins' fields.
    The original admin becomes both the creator and the first admin.
    """
    Network = apps.get_model('network', 'Network')
    
    for network in Network.objects.all():
        # Get the old admin value from the database directly
        # We need to use raw SQL because the field will be renamed
        from django.db import connection
        with connection.cursor() as cursor:
            cursor.execute(
                "SELECT admin_id FROM network_network WHERE id = %s",
                [network.id]
            )
            result = cursor.fetchone()
            if result and result[0]:
                old_admin_id = result[0]
                # Set created_by to the old admin
                network.created_by_id = old_admin_id
                network.save()
                # Add the old admin to the admins many-to-many field
                network.admins.add(old_admin_id)


def reverse_migrate_created_by_to_admin(apps, schema_editor):
    """
    Reverse migration: set the admin field to the created_by value.
    Note: This will lose information about additional admins.
    """
    Network = apps.get_model('network', 'Network')
    
    for network in Network.objects.all():
        if network.created_by:
            # We can't directly set the admin field as it's being removed,
            # but we can update the database directly
            from django.db import connection
            with connection.cursor() as cursor:
                cursor.execute(
                    "UPDATE network_network SET admin_id = %s WHERE id = %s",
                    [network.created_by.id, network.id]
                )


class Migration(migrations.Migration):

    dependencies = [
        ('network', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        # Step 1: Remove the old unique constraint first
        migrations.AlterUniqueTogether(
            name='network',
            unique_together=set(),
        ),
        
        # Step 2: Add the new fields
        migrations.AddField(
            model_name='network',
            name='created_by',
            field=models.ForeignKey(
                help_text='User who created this network',
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='created_networks',
                to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name='network',
            name='admins',
            field=models.ManyToManyField(
                help_text='Users who can administrate this network',
                related_name='administered_networks',
                to=settings.AUTH_USER_MODEL
            ),
        ),
        
        # Step 3: Migrate the data
        migrations.RunPython(
            migrate_admin_to_created_by_and_admins,
            reverse_migrate_created_by_to_admin,
        ),
        
        # Step 4: Make created_by non-nullable
        migrations.AlterField(
            model_name='network',
            name='created_by',
            field=models.ForeignKey(
                help_text='User who created this network',
                on_delete=django.db.models.deletion.CASCADE,
                related_name='created_networks',
                to=settings.AUTH_USER_MODEL
            ),
        ),
        
        # Step 5: Remove the old admin field
        migrations.RemoveField(
            model_name='network',
            name='admin',
        ),
        
        # Step 6: Add the new unique constraint
        migrations.AlterUniqueTogether(
            name='network',
            unique_together={('name', 'created_by')},
        ),
    ]
